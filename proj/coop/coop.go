// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package coop

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CoopABI is the input ABI used to generate the binding from.
const CoopABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getModuleId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claimSign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProjectNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"bytes32\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"cata\",\"type\":\"string\"},{\"name\":\"desc\",\"type\":\"string\"},{\"name\":\"attachment\",\"type\":\"string\"},{\"name\":\"pratio\",\"type\":\"uint256\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"claimDeliver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"projectComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getProjectId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getProject\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[2]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tasks\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getClaimerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"deliverySign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTaskNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"projects\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"pid\",\"type\":\"bytes32\"},{\"name\":\"sponsor\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"cata\",\"type\":\"string\"},{\"name\":\"desc\",\"type\":\"string\"},{\"name\":\"attachment\",\"type\":\"string\"},{\"name\":\"pratio\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"purchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sn\",\"type\":\"bytes32\"},{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"pratio\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getTaskId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idxtoids\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"projectCancel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ver\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sn\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"itemid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"details\",\"type\":\"string\"}],\"name\":\"Receipt\",\"type\":\"event\"}]"

// CoopBin is the compiled bytecode used for deploying new contracts.
const CoopBin = `"608060405260006002553480156200001657600080fd5b5060405162005ffc38038062005ffc833981810160405260208110156200003c57600080fd5b8101908080516401000000008111156200005557600080fd5b828101905060208101848111156200006c57600080fd5b81518560018202830111640100000000821117156200008a57600080fd5b505092919050505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060009080519060200190620000eb929190620000f3565b5050620001a2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013657805160ff191683800117855562000167565b8280016001018555821562000167579182015b828111156200016657825182559160200191906001019062000149565b5b5090506200017691906200017a565b5090565b6200019f91905b808211156200019b57600081600090555060010162000181565b5090565b90565b615e4a80620001b26000396000f3fe6080604052600436106101405760003560e01c8063841c814a116100b6578063bd66528a1161006f578063bd66528a14610ddd578063cc44561114610e30578063d3c583aa14610e76578063d44bc08814610ed0578063f63afc2314610f1f578063fa09873814610f6e57610140565b8063841c814a146109c35780638597a4e214610a485780638da5cb5b14610aa7578063a9059cbb14610afe578063ac04277e14610b64578063b96ea12d14610b8f57610140565b806331fa18b11161010857806331fa18b1146105525780633bea04df146105a55780633d932dfb146105f85780634b5f748a1461064757806354fd4d50146108c45780637149d2e41461095457610140565b806301f57cba14610145578063069826af1461019e578063072ea9b11461021157806310d8d74d1461023c578063150f99f214610299575b600080fd5b34801561015157600080fd5b506101886004803603604081101561016857600080fd5b810190808035906020019092919080359060200190929190505050610fc1565b6040518082815260200191505060405180910390f35b3480156101aa57600080fd5b506101f7600480360360408110156101c157600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611404565b604051808215151515815260200191505060405180910390f35b34801561021d57600080fd5b50610226611776565b6040518082815260200191505060405180910390f35b34801561024857600080fd5b5061027f6004803603604081101561025f57600080fd5b810190808035906020019092919080359060200190929190505050611780565b604051808215151515815260200191505060405180910390f35b3480156102a557600080fd5b50610538600480360360c08110156102bc57600080fd5b8101908080359060200190929190803590602001906401000000008111156102e357600080fd5b8201836020820111156102f557600080fd5b8035906020019184600183028401116401000000008311171561031757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561037a57600080fd5b82018360208201111561038c57600080fd5b803590602001918460018302840111640100000000831117156103ae57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561041157600080fd5b82018360208201111561042357600080fd5b8035906020019184600183028401116401000000008311171561044557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156104a857600080fd5b8201836020820111156104ba57600080fd5b803590602001918460018302840111640100000000831117156104dc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506119d2565b604051808215151515815260200191505060405180910390f35b34801561055e57600080fd5b5061058b6004803603602081101561057557600080fd5b81019080803590602001909291905050506120e2565b604051808215151515815260200191505060405180910390f35b3480156105b157600080fd5b506105de600480360360208110156105c857600080fd5b81019080803590602001909291905050506123fb565b604051808215151515815260200191505060405180910390f35b34801561060457600080fd5b506106316004803603602081101561061b57600080fd5b8101908080359060200190929190505050612714565b6040518082815260200191505060405180910390f35b34801561065357600080fd5b506106806004803603602081101561066a57600080fd5b8101908080359060200190929190505050612731565b604051808c81526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001806020018060200189815260200188600260200280838360005b838110156106ff5780820151818401526020810190506106e4565b5050505090500187815260200186815260200185810385528d818151815260200191508051906020019080838360005b8381101561074a57808201518184015260208101905061072f565b50505050905090810190601f1680156107775780820380516001836020036101000a031916815260200191505b5085810384528c818151815260200191508051906020019080838360005b838110156107b0578082015181840152602081019050610795565b50505050905090810190601f1680156107dd5780820380516001836020036101000a031916815260200191505b5085810383528b818151815260200191508051906020019080838360005b838110156108165780820151818401526020810190506107fb565b50505050905090810190601f1680156108435780820380516001836020036101000a031916815260200191505b5085810382528a818151815260200191508051906020019080838360005b8381101561087c578082015181840152602081019050610861565b50505050905090810190601f1680156108a95780820380516001836020036101000a031916815260200191505b509f5050505050505050505050505050505060405180910390f35b3480156108d057600080fd5b506108d9612bf2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109195780820151818401526020810190506108fe565b50505050905090810190601f1680156109465780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561096057600080fd5b506109ad6004803603604081101561097757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612c90565b6040518082815260200191505060405180910390f35b3480156109cf57600080fd5b50610a06600480360360408110156109e657600080fd5b810190808035906020019092919080359060200190929190505050612cbe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a5457600080fd5b50610a8d60048036036040811015610a6b57600080fd5b8101908080359060200190929190803515159060200190929190505050613101565b604051808215151515815260200191505060405180910390f35b348015610ab357600080fd5b50610abc613387565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610b4a60048036036040811015610b1457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506133ad565b604051808215151515815260200191505060405180910390f35b348015610b7057600080fd5b50610b796134e7565b6040518082815260200191505060405180910390f35b348015610b9b57600080fd5b50610bc860048036036020811015610bb257600080fd5b8101908080359060200190929190505050613531565b604051808b81526020018a81526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001806020018060200188815260200187815260200186815260200185810385528c818151815260200191508051906020019080838360005b83811015610c64578082015181840152602081019050610c49565b50505050905090810190601f168015610c915780820380516001836020036101000a031916815260200191505b5085810384528b818151815260200191508051906020019080838360005b83811015610cca578082015181840152602081019050610caf565b50505050905090810190601f168015610cf75780820380516001836020036101000a031916815260200191505b5085810383528a818151815260200191508051906020019080838360005b83811015610d30578082015181840152602081019050610d15565b50505050905090810190601f168015610d5d5780820380516001836020036101000a031916815260200191505b50858103825289818151815260200191508051906020019080838360005b83811015610d96578082015181840152602081019050610d7b565b50505050905090810190601f168015610dc35780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b348015610de957600080fd5b50610e1660048036036020811015610e0057600080fd5b8101908080359060200190929190505050613805565b604051808215151515815260200191505060405180910390f35b610e5c60048036036020811015610e4657600080fd5b8101908080359060200190929190505050613c32565b604051808215151515815260200191505060405180910390f35b610eb660048036036060811015610e8c57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050613fc3565b604051808215151515815260200191505060405180910390f35b348015610edc57600080fd5b50610f0960048036036020811015610ef357600080fd5b81019080803590602001909291905050506149e5565b6040518082815260200191505060405180910390f35b348015610f2b57600080fd5b50610f5860048036036020811015610f4257600080fd5b8101908080359060200190929190505050614a43565b6040518082815260200191505060405180910390f35b348015610f7a57600080fd5b50610fa760048036036020811015610f9157600080fd5b8101908080359060200190929190505050614a5b565b604051808215151515815260200191505060405180910390f35b6000610fcb615a7d565b600460008581526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110ed5780601f106110c2576101008083540402835291602001916110ed565b820191906000526020600020905b8154815290600101906020018083116110d057829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561118f5780601f106111645761010080835404028352916020019161118f565b820191906000526020600020905b81548152906001019060200180831161117257829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112315780601f1061120657610100808354040283529160200191611231565b820191906000526020600020905b81548152906001019060200180831161121457829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112d35780601f106112a8576101008083540402835291602001916112d3565b820191906000526020600020905b8154815290600101906020018083116112b657829003601f168201915b50505050508152602001600782015481526020016008820180548060200260200160405190810160405280929190818152602001828054801561133557602002820191906000526020600020905b815481526020019060010190808311611321575b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156113c357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611379575b50505050508152602001600a8201548152602001600b82015481525050905080610100015183815181106113f357fe5b602002602001015191505092915050565b6000806004600085815260200190815260200160002090506000801b81600101541415611499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f70726f6a656374206d7573742062652073756270726f6a65637400000000000081525060200191505060405180910390fd5b600181600a015414611513576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f70726f6a65637420737461747573206d7573746520626520310000000000000081525060200191505060405180910390fd5b6115768160000154600460008460010154815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001604051806060016040528060298152602001615d4e60299139614efc565b600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461163c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f70726f6a65637420686173206265656e20636c61696d6564000000000000000081525060200191505060405180910390fd5b828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600281600a0181905550833373ffffffffffffffffffffffffffffffffffffffff166116aa8661513d565b7f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c86600042604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200184815260200183815260200180602001838103835260098152602001807f636c61696d5369676e00000000000000000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a4600191505092915050565b6000600254905090565b6000806004600085815260200190815260200160002090506000801b816001015414611814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f70726f6a6563742063616e206e6f742062652073756270726f6a65637400000081525060200191505060405180910390fd5b600081600a0154141561188f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f70726f6a656374207374617475732063616e206e6f742062652030000000000081525060200191505060405180910390fd5b6118dc81600001548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001604051806060016040528060228152602001615da360229139614efc565b828160070181905550833373ffffffffffffffffffffffffffffffffffffffff166119068661513d565b7f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c60008042604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200184815260200183815260200180602001838103835260088152602001807f73657450726963650000000000000000000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a4600191505092915050565b600080338742604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140183805190602001908083835b60208310611a435780518252602082019150602081019050602083039250611a20565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405280519060200120905060008090506000801b8914611db6576000600460008b815260200190815260200160002090506000801b81600101541415611b3c57600181600a015414611b37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f706172656e742070726f6a65637420737461747573206d75737420626520310081525060200191505060405180910390fd5b611bb7565b600281600a015414611bb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f706172656e742070726f6a65637420737461747573206d75737420626520320081525060200191505060405180910390fd5b5b611c0481600001548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016040518060600160405280602c8152602001615d77602c9139614efc565b600080611c118c866151ac565b80925081935050506064871115611c90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f726174696f20696c6c6567616c0000000000000000000000000000000000000081525060200191505060405180910390fd5b86821015611d06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f72656d61696e20726174696f20696e73756666696369656e740000000000000081525060200191505060405180910390fd5b6000151581151514611d80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f70726f6a6563742065786973746564000000000000000000000000000000000081525060200191505060405180910390fd5b82600801859080600181540180825580915050906001820390600052602060002001600090919290919091505550505050611dba565b3390505b6040518061018001604052808381526020018a81526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020018781526020018681526020018581526020016000604051908082528060200260200182016040528015611e3c5781602001602082028038833980820191505090505b5081526020016000604051908082528060200260200182016040528015611e725781602001602082028038833980820191505090505b508152602001600181526020014281525060046000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190611f0d929190615afa565b506080820151816004019080519060200190611f2a929190615afa565b5060a0820151816005019080519060200190611f47929190615afa565b5060c0820151816006019080519060200190611f64929190615afa565b5060e08201518160070155610100820151816008019080519060200190611f8c929190615b7a565b50610120820151816009019080519060200190611faa929190615bc7565b5061014082015181600a015561016082015181600b01559050508160036000600254815260200190815260200160002081905550600260008154809291906001019190505550813373ffffffffffffffffffffffffffffffffffffffff166120118461513d565b7f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c60008042604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200184815260200183815260200180602001838103835260078152602001807f7075626c697368000000000000000000000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a46001925050509695505050505050565b6000806004600084815260200190815260200160002090506000801b81600101541415612177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f70726f6a656374206d7573742062652073756270726f6a65637400000000000081525060200191505060405180910390fd5b600281600a0154146121f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f70726f6a65637420737461747573206d7573742062652032000000000000000081525060200191505060405180910390fd5b61223e81600001548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001604051806060016040528060228152602001615da360229139614efc565b60008090505b816008018054905081101561230457600480600084600801848154811061226757fe5b90600052602060002001548152602001908152602001600020600a0154146122f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f73756270726f6a65637420737461747573206d7573742062652034000000000081525060200191505060405180910390fd5b8080600101915050612244565b50600381600a0181905550823373ffffffffffffffffffffffffffffffffffffffff166123308561513d565b7f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c60008042604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838152602001806020018381038352600c8152602001807f636c61696d44656c6976657200000000000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a46001915050919050565b6000806004600084815260200190815260200160002090506000801b81600101541461248f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f70726f6a6563742063616e206e6f742062652073756270726f6a65637400000081525060200191505060405180910390fd5b600381600a0154111561250a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f70726f6a65637420737461747573206d757374206265203c3d3300000000000081525060200191505060405180910390fd5b61255781600001548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001604051806060016040528060228152602001615da360229139614efc565b60008090505b816008018054905081101561261d57600480600084600801848154811061258057fe5b90600052602060002001548152602001908152602001600020600a015414612610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f73756270726f6a65637420737461747573206d7573742062652034000000000081525060200191505060405180910390fd5b808060010191505061255d565b50600481600a0181905550823373ffffffffffffffffffffffffffffffffffffffff166126498561513d565b7f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c60008042604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838152602001806020018381038352600f8152602001807f70726f6a656374436f6d706c65746500000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a46001915050919050565b600060036000838152602001908152602001600020549050919050565b60008060006060806060806000612746615c51565b600080612751615a7d565b600460008e81526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128735780601f1061284857610100808354040283529160200191612873565b820191906000526020600020905b81548152906001019060200180831161285657829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129155780601f106128ea57610100808354040283529160200191612915565b820191906000526020600020905b8154815290600101906020018083116128f857829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129b75780601f1061298c576101008083540402835291602001916129b7565b820191906000526020600020905b81548152906001019060200180831161299a57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a595780601f10612a2e57610100808354040283529160200191612a59565b820191906000526020600020905b815481529060010190602001808311612a3c57829003601f168201915b505050505081526020016007820154815260200160088201805480602002602001604051908101604052809291908181526020018280548015612abb57602002820191906000526020600020905b815481526020019060010190808311612aa7575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015612b4957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612aff575b50505050508152602001600a8201548152602001600b820154815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e0015160405180604001604052808a61010001515181526020018a6101200151518152508961014001518a61016001518898508797508696508595508494509b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c885780601f10612c5d57610100808354040283529160200191612c88565b820191906000526020600020905b815481529060010190602001808311612c6b57829003601f168201915b505050505081565b60056020528160005260406000208181548110612ca957fe5b90600052602060002001600091509150505481565b6000612cc8615a7d565b600460008581526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612dea5780601f10612dbf57610100808354040283529160200191612dea565b820191906000526020600020905b815481529060010190602001808311612dcd57829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e8c5780601f10612e6157610100808354040283529160200191612e8c565b820191906000526020600020905b815481529060010190602001808311612e6f57829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612f2e5780601f10612f0357610100808354040283529160200191612f2e565b820191906000526020600020905b815481529060010190602001808311612f1157829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612fd05780601f10612fa557610100808354040283529160200191612fd0565b820191906000526020600020905b815481529060010190602001808311612fb357829003601f168201915b50505050508152602001600782015481526020016008820180548060200260200160405190810160405280929190818152602001828054801561303257602002820191906000526020600020905b81548152602001906001019080831161301e575b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156130c057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613076575b50505050508152602001600a8201548152602001600b82015481525050905080610120015183815181106130f057fe5b602002602001015191505092915050565b6000806004600085815260200190815260200160002090506000801b81600101541415613196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f70726f6a656374206d7573742062652073756270726f6a65637400000000000081525060200191505060405180910390fd5b600381600a015414613210576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f70726f6a65637420737461747573206d7573742062652033000000000000000081525060200191505060405180910390fd5b6132738160000154600460008460010154815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001604051806060016040528060298152602001615d4e60299139614efc565b60011515831515141561328f57600481600a018190555061329a565b600281600a01819055505b833373ffffffffffffffffffffffffffffffffffffffff166132bb8661513d565b7f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c60008042604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838152602001806020018381038352600c8152602001807f64656c69766572795369676e00000000000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a4600191505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156133f5573d6000803e3d6000fd5b506000801b3373ffffffffffffffffffffffffffffffffffffffff1661341d6000801b61513d565b7f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c868642604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200184815260200183815260200180602001838103835260088152602001807f7472616e736665720000000000000000000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a46001905092915050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905090565b60046020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561360f5780601f106135e45761010080835404028352916020019161360f565b820191906000526020600020905b8154815290600101906020018083116135f257829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136ad5780601f10613682576101008083540402835291602001916136ad565b820191906000526020600020905b81548152906001019060200180831161369057829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561374b5780601f106137205761010080835404028352916020019161374b565b820191906000526020600020905b81548152906001019060200180831161372e57829003601f168201915b505050505090806006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137e95780601f106137be576101008083540402835291602001916137e9565b820191906000526020600020905b8154815290600101906020018083116137cc57829003601f168201915b50505050509080600701549080600a01549080600b015490508a565b6000806004600084815260200190815260200160002090506000801b8160010154141561389a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f70726f6a656374206d7573742062652073756270726f6a65637400000000000081525060200191505060405180910390fd5b600181600a015414613914576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f70726f6a65637420737461747573206d7573746520626520310000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600460008360010154815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156139d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180615dc5602c913960400191505060405180910390fd5b60008090505b8160090180549050811015613a7457613a6782600001548360090183815481106139ff57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006040518060400160405280601e81526020017f6d73672073656e6465722068617320616c726561647920636c61696d65640000815250614efc565b80806001019150506139d9565b50806009013390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050906001820390600052602060002001600090919290919091505550823373ffffffffffffffffffffffffffffffffffffffff16613b678561513d565b7f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c60008042604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200184815260200183815260200180602001838103835260058152602001807f636c61696d0000000000000000000000000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a46001915050919050565b6000806004600084815260200190815260200160002090506000801b816001015414613cc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f70726f6a6563742063616e206e6f742062652073756270726f6a65637400000081525060200191505060405180910390fd5b600481600a015414613d40576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f70726f6a65637420737461747573206d7573742062652034000000000000000081525060200191505060405180910390fd5b613d8d81600001548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000604051806060016040528060258152602001615df160259139614efc565b80600701543373ffffffffffffffffffffffffffffffffffffffff16311015613e1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f696e73756666696369656e742062616c616e636500000000000000000000000081525060200191505060405180910390fd5b6000613e298461513d565b905060011515613e428284600001548560070154613fc3565b151514613eb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f7075726368617365206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff16827f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c8560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866007015442604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200184815260200183815260200180602001838103835260088152602001807f70757263686173650000000000000000000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a4600192505050919050565b600080829050613fd1615a7d565b600460008681526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156140f35780601f106140c8576101008083540402835291602001916140f3565b820191906000526020600020905b8154815290600101906020018083116140d657829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156141955780601f1061416a57610100808354040283529160200191614195565b820191906000526020600020905b81548152906001019060200180831161417857829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142375780601f1061420c57610100808354040283529160200191614237565b820191906000526020600020905b81548152906001019060200180831161421a57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142d95780601f106142ae576101008083540402835291602001916142d9565b820191906000526020600020905b8154815290600101906020018083116142bc57829003601f168201915b50505050508152602001600782015481526020016008820180548060200260200160405190810160405280929190818152602001828054801561433b57602002820191906000526020600020905b815481526020019060010190808311614327575b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156143c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161437f575b50505050508152602001600a8201548152602001600b820154815250509050813373ffffffffffffffffffffffffffffffffffffffff16311015614412576000925050506149de565b60008090505b816101000151518110156148ae5761442e615a7d565b60046000846101000151848151811061444357fe5b602002602001015181526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156145685780601f1061453d57610100808354040283529160200191614568565b820191906000526020600020905b81548152906001019060200180831161454b57829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561460a5780601f106145df5761010080835404028352916020019161460a565b820191906000526020600020905b8154815290600101906020018083116145ed57829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156146ac5780601f10614681576101008083540402835291602001916146ac565b820191906000526020600020905b81548152906001019060200180831161468f57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561474e5780601f106147235761010080835404028352916020019161474e565b820191906000526020600020905b81548152906001019060200180831161473157829003601f168201915b5050505050815260200160078201548152602001600882018054806020026020016040519081016040528092919081815260200182805480156147b057602002820191906000526020600020905b81548152602001906001019080831161479c575b505050505081526020016009820180548060200260200160405190810160405280929190818152602001828054801561483e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116147f4575b50505050508152602001600a8201548152602001600b820154815250509050600060648260e0015186028161486f57fe5b04905080850394506001151561488a8a846000015184613fc3565b15151461489f576000955050505050506149de565b50508080600101915050614418565b50806040015173ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156148f9573d6000803e3d6000fd5b50843373ffffffffffffffffffffffffffffffffffffffff16877f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c84604001518642604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200184815260200183815260200180602001838103835260098152602001807f6c697175696461746500000000000000000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a46001925050505b9392505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110614a3157fe5b90600052602060002001549050919050565b60036020528060005260406000206000915090505481565b6000806004600084815260200190815260200160002090506000801b81600001541415614af0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f70726f6a6563742069642063616e206e6f7420626520656d707479000000000081525060200191505060405180910390fd5b600281600a01541115614b6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f70726f6a65637420737461747573206d757374206265203c3d3200000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614d435760008090505b8160080180549050811015614c8b57600160046000846008018481548110614bed57fe5b90600052602060002001548152602001908152602001600020600a01541115614c7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f73756270726f6a65637420737461747573206d757374206265203c3d3100000081525060200191505060405180910390fd5b8080600101915050614bc9565b506000801b81600101541415614caa57600081600a0181905550614d42565b6000604051908082528060200260200182016040528015614cda5781602001602082028038833980820191505090505b50816008019080519060200190614cf2929190615c73565b50600181600a018190555060008160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b60008090505b8160090180549050811015614e0f573373ffffffffffffffffffffffffffffffffffffffff16826009018281548110614d7e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614e0257816009018181548110614dd457fe5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b8080600101915050614d49565b50823373ffffffffffffffffffffffffffffffffffffffff16614e318561513d565b7f51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c60008042604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838152602001806020018381038352600d8152602001807f70726f6a65637443616e63656c000000000000000000000000000000000000008152506020018381038252600081526020016020019550505050505060405180910390a46001915050919050565b6000801b841415614f75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f70726f6a6563742069642063616e206e6f7420626520656d707479000000000081525060200191505060405180910390fd5b60011515821515141561505e578273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148190615058576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561501d578082015181840152602081019050615002565b50505050905090810190601f16801561504a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50615137565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158190615135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156150fa5780820151818401526020810190506150df565b50505050905090810190601f1680156151275780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505b50505050565b6000338242604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018381526020018281526020019350505050604051602081830303815290604052805190602001209050919050565b60008060006064905060008090506151c2615a7d565b600460008881526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156152e45780601f106152b9576101008083540402835291602001916152e4565b820191906000526020600020905b8154815290600101906020018083116152c757829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156153865780601f1061535b57610100808354040283529160200191615386565b820191906000526020600020905b81548152906001019060200180831161536957829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156154285780601f106153fd57610100808354040283529160200191615428565b820191906000526020600020905b81548152906001019060200180831161540b57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156154ca5780601f1061549f576101008083540402835291602001916154ca565b820191906000526020600020905b8154815290600101906020018083116154ad57829003601f168201915b50505050508152602001600782015481526020016008820180548060200260200160405190810160405280929190818152602001828054801561552c57602002820191906000526020600020905b815481526020019060010190808311615518575b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156155ba57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311615570575b50505050508152602001600a8201548152602001600b82015481525050905060008090505b81610100015151811015615a6b576155f5615a7d565b60046000846101000151848151811061560a57fe5b602002602001015181526020019081526020016000206040518061018001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561572f5780601f106157045761010080835404028352916020019161572f565b820191906000526020600020905b81548152906001019060200180831161571257829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156157d15780601f106157a6576101008083540402835291602001916157d1565b820191906000526020600020905b8154815290600101906020018083116157b457829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156158735780601f1061584857610100808354040283529160200191615873565b820191906000526020600020905b81548152906001019060200180831161585657829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156159155780601f106158ea57610100808354040283529160200191615915565b820191906000526020600020905b8154815290600101906020018083116158f857829003601f168201915b50505050508152602001600782015481526020016008820180548060200260200160405190810160405280929190818152602001828054801561597757602002820191906000526020600020905b815481526020019060010190808311615963575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015615a0557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116159bb575b50505050508152602001600a8201548152602001600b8201548152505090508781600001511415615a3557600193505b8060e001518511615a5457600084819150965096505050505050615a76565b8060e00151850394505080806001019150506155df565b508282945094505050505b9250929050565b6040518061018001604052806000801916815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160008152602001606081526020016060815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615b3b57805160ff1916838001178555615b69565b82800160010185558215615b69579182015b82811115615b68578251825591602001919060010190615b4d565b5b509050615b769190615cc0565b5090565b828054828255906000526020600020908101928215615bb6579160200282015b82811115615bb5578251825591602001919060010190615b9a565b5b509050615bc39190615ce5565b5090565b828054828255906000526020600020908101928215615c40579160200282015b82811115615c3f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190615be7565b5b509050615c4d9190615d0a565b5090565b6040518060400160405280600290602082028038833980820191505090505090565b828054828255906000526020600020908101928215615caf579160200282015b82811115615cae578251825591602001919060010190615c93565b5b509050615cbc9190615ce5565b5090565b615ce291905b80821115615cde576000816000905550600101615cc6565b5090565b90565b615d0791905b80821115615d03576000816000905550600101615ceb565b5090565b90565b615d4a91905b80821115615d4657600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101615d10565b5090565b9056fe6d73672073656e646572206d75737420626520706172656e742070726f6a6563742073706f6e736f726d73672073656e646572206d7573742062652073706f6e736f72206f6620706172656e742070726f6a6563746d73672073656e646572206d7573742062652070726f6a6563742073706f6e736f726d73672073656e6465722063616e206e6f7420626520706172656e742070726f6a6563742073706f6e736f726d73672073656e6465722063616e206e6f742062652070726f6a6563742073706f6e736f72a265627a7a723058207a76bbeeefda62266af25fac62634471b686a1d0187a9f9d448d7f9df0766bcc64736f6c63430005090032"`

// DeployCoop deploys a new Ethereum contract, binding an instance of Coop to it.
func DeployCoop(auth *bind.TransactOpts, backend bind.ContractBackend, ver string) (common.Address, *types.Transaction, *Coop, error) {
	parsed, err := abi.JSON(strings.NewReader(CoopABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CoopBin), backend, ver)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Coop{CoopCaller: CoopCaller{contract: contract}, CoopTransactor: CoopTransactor{contract: contract}, CoopFilterer: CoopFilterer{contract: contract}}, nil
}

// Coop is an auto generated Go binding around an Ethereum contract.
type Coop struct {
	CoopCaller     // Read-only binding to the contract
	CoopTransactor // Write-only binding to the contract
	CoopFilterer   // Log filterer for contract events
}

// CoopCaller is an auto generated read-only Go binding around an Ethereum contract.
type CoopCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoopTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CoopTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoopFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CoopFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoopSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CoopSession struct {
	Contract     *Coop             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CoopCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CoopCallerSession struct {
	Contract *CoopCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CoopTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CoopTransactorSession struct {
	Contract     *CoopTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CoopRaw is an auto generated low-level Go binding around an Ethereum contract.
type CoopRaw struct {
	Contract *Coop // Generic contract binding to access the raw methods on
}

// CoopCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CoopCallerRaw struct {
	Contract *CoopCaller // Generic read-only contract binding to access the raw methods on
}

// CoopTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CoopTransactorRaw struct {
	Contract *CoopTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCoop creates a new instance of Coop, bound to a specific deployed contract.
func NewCoop(address common.Address, backend bind.ContractBackend) (*Coop, error) {
	contract, err := bindCoop(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Coop{CoopCaller: CoopCaller{contract: contract}, CoopTransactor: CoopTransactor{contract: contract}, CoopFilterer: CoopFilterer{contract: contract}}, nil
}

// NewCoopCaller creates a new read-only instance of Coop, bound to a specific deployed contract.
func NewCoopCaller(address common.Address, caller bind.ContractCaller) (*CoopCaller, error) {
	contract, err := bindCoop(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CoopCaller{contract: contract}, nil
}

// NewCoopTransactor creates a new write-only instance of Coop, bound to a specific deployed contract.
func NewCoopTransactor(address common.Address, transactor bind.ContractTransactor) (*CoopTransactor, error) {
	contract, err := bindCoop(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CoopTransactor{contract: contract}, nil
}

// NewCoopFilterer creates a new log filterer instance of Coop, bound to a specific deployed contract.
func NewCoopFilterer(address common.Address, filterer bind.ContractFilterer) (*CoopFilterer, error) {
	contract, err := bindCoop(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CoopFilterer{contract: contract}, nil
}

// bindCoop binds a generic wrapper to an already deployed contract.
func bindCoop(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CoopABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Coop *CoopRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Coop.Contract.CoopCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Coop *CoopRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coop.Contract.CoopTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Coop *CoopRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Coop.Contract.CoopTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Coop *CoopCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Coop.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Coop *CoopTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coop.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Coop *CoopTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Coop.Contract.contract.Transact(opts, method, params...)
}

// GetClaimerAddr is a free data retrieval call binding the contract method 0x841c814a.
//
// Solidity: function getClaimerAddr(bytes32 id, uint256 idx) constant returns(address)
func (_Coop *CoopCaller) GetClaimerAddr(opts *bind.CallOpts, id [32]byte, idx *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Coop.contract.Call(opts, out, "getClaimerAddr", id, idx)
	return *ret0, err
}

// GetClaimerAddr is a free data retrieval call binding the contract method 0x841c814a.
//
// Solidity: function getClaimerAddr(bytes32 id, uint256 idx) constant returns(address)
func (_Coop *CoopSession) GetClaimerAddr(id [32]byte, idx *big.Int) (common.Address, error) {
	return _Coop.Contract.GetClaimerAddr(&_Coop.CallOpts, id, idx)
}

// GetClaimerAddr is a free data retrieval call binding the contract method 0x841c814a.
//
// Solidity: function getClaimerAddr(bytes32 id, uint256 idx) constant returns(address)
func (_Coop *CoopCallerSession) GetClaimerAddr(id [32]byte, idx *big.Int) (common.Address, error) {
	return _Coop.Contract.GetClaimerAddr(&_Coop.CallOpts, id, idx)
}

// GetModuleId is a free data retrieval call binding the contract method 0x01f57cba.
//
// Solidity: function getModuleId(bytes32 id, uint256 idx) constant returns(bytes32)
func (_Coop *CoopCaller) GetModuleId(opts *bind.CallOpts, id [32]byte, idx *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Coop.contract.Call(opts, out, "getModuleId", id, idx)
	return *ret0, err
}

// GetModuleId is a free data retrieval call binding the contract method 0x01f57cba.
//
// Solidity: function getModuleId(bytes32 id, uint256 idx) constant returns(bytes32)
func (_Coop *CoopSession) GetModuleId(id [32]byte, idx *big.Int) ([32]byte, error) {
	return _Coop.Contract.GetModuleId(&_Coop.CallOpts, id, idx)
}

// GetModuleId is a free data retrieval call binding the contract method 0x01f57cba.
//
// Solidity: function getModuleId(bytes32 id, uint256 idx) constant returns(bytes32)
func (_Coop *CoopCallerSession) GetModuleId(id [32]byte, idx *big.Int) ([32]byte, error) {
	return _Coop.Contract.GetModuleId(&_Coop.CallOpts, id, idx)
}

// GetProject is a free data retrieval call binding the contract method 0x4b5f748a.
//
// Solidity: function getProject(bytes32 id) constant returns(bytes32, bytes32, address, string, string, string, string, uint256, uint256[2], uint256, uint256)
func (_Coop *CoopCaller) GetProject(opts *bind.CallOpts, id [32]byte) ([32]byte, [32]byte, common.Address, string, string, string, string, *big.Int, [2]*big.Int, *big.Int, *big.Int, error) {
	var (
		ret0  = new([32]byte)
		ret1  = new([32]byte)
		ret2  = new(common.Address)
		ret3  = new(string)
		ret4  = new(string)
		ret5  = new(string)
		ret6  = new(string)
		ret7  = new(*big.Int)
		ret8  = new([2]*big.Int)
		ret9  = new(*big.Int)
		ret10 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
		ret6,
		ret7,
		ret8,
		ret9,
		ret10,
	}
	err := _Coop.contract.Call(opts, out, "getProject", id)
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, *ret6, *ret7, *ret8, *ret9, *ret10, err
}

// GetProject is a free data retrieval call binding the contract method 0x4b5f748a.
//
// Solidity: function getProject(bytes32 id) constant returns(bytes32, bytes32, address, string, string, string, string, uint256, uint256[2], uint256, uint256)
func (_Coop *CoopSession) GetProject(id [32]byte) ([32]byte, [32]byte, common.Address, string, string, string, string, *big.Int, [2]*big.Int, *big.Int, *big.Int, error) {
	return _Coop.Contract.GetProject(&_Coop.CallOpts, id)
}

// GetProject is a free data retrieval call binding the contract method 0x4b5f748a.
//
// Solidity: function getProject(bytes32 id) constant returns(bytes32, bytes32, address, string, string, string, string, uint256, uint256[2], uint256, uint256)
func (_Coop *CoopCallerSession) GetProject(id [32]byte) ([32]byte, [32]byte, common.Address, string, string, string, string, *big.Int, [2]*big.Int, *big.Int, *big.Int, error) {
	return _Coop.Contract.GetProject(&_Coop.CallOpts, id)
}

// GetProjectId is a free data retrieval call binding the contract method 0x3d932dfb.
//
// Solidity: function getProjectId(uint256 idx) constant returns(bytes32)
func (_Coop *CoopCaller) GetProjectId(opts *bind.CallOpts, idx *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Coop.contract.Call(opts, out, "getProjectId", idx)
	return *ret0, err
}

// GetProjectId is a free data retrieval call binding the contract method 0x3d932dfb.
//
// Solidity: function getProjectId(uint256 idx) constant returns(bytes32)
func (_Coop *CoopSession) GetProjectId(idx *big.Int) ([32]byte, error) {
	return _Coop.Contract.GetProjectId(&_Coop.CallOpts, idx)
}

// GetProjectId is a free data retrieval call binding the contract method 0x3d932dfb.
//
// Solidity: function getProjectId(uint256 idx) constant returns(bytes32)
func (_Coop *CoopCallerSession) GetProjectId(idx *big.Int) ([32]byte, error) {
	return _Coop.Contract.GetProjectId(&_Coop.CallOpts, idx)
}

// GetProjectNum is a free data retrieval call binding the contract method 0x072ea9b1.
//
// Solidity: function getProjectNum() constant returns(uint256)
func (_Coop *CoopCaller) GetProjectNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Coop.contract.Call(opts, out, "getProjectNum")
	return *ret0, err
}

// GetProjectNum is a free data retrieval call binding the contract method 0x072ea9b1.
//
// Solidity: function getProjectNum() constant returns(uint256)
func (_Coop *CoopSession) GetProjectNum() (*big.Int, error) {
	return _Coop.Contract.GetProjectNum(&_Coop.CallOpts)
}

// GetProjectNum is a free data retrieval call binding the contract method 0x072ea9b1.
//
// Solidity: function getProjectNum() constant returns(uint256)
func (_Coop *CoopCallerSession) GetProjectNum() (*big.Int, error) {
	return _Coop.Contract.GetProjectNum(&_Coop.CallOpts)
}

// GetTaskId is a free data retrieval call binding the contract method 0xd44bc088.
//
// Solidity: function getTaskId(uint256 idx) constant returns(bytes32)
func (_Coop *CoopCaller) GetTaskId(opts *bind.CallOpts, idx *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Coop.contract.Call(opts, out, "getTaskId", idx)
	return *ret0, err
}

// GetTaskId is a free data retrieval call binding the contract method 0xd44bc088.
//
// Solidity: function getTaskId(uint256 idx) constant returns(bytes32)
func (_Coop *CoopSession) GetTaskId(idx *big.Int) ([32]byte, error) {
	return _Coop.Contract.GetTaskId(&_Coop.CallOpts, idx)
}

// GetTaskId is a free data retrieval call binding the contract method 0xd44bc088.
//
// Solidity: function getTaskId(uint256 idx) constant returns(bytes32)
func (_Coop *CoopCallerSession) GetTaskId(idx *big.Int) ([32]byte, error) {
	return _Coop.Contract.GetTaskId(&_Coop.CallOpts, idx)
}

// GetTaskNum is a free data retrieval call binding the contract method 0xac04277e.
//
// Solidity: function getTaskNum() constant returns(uint256)
func (_Coop *CoopCaller) GetTaskNum(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Coop.contract.Call(opts, out, "getTaskNum")
	return *ret0, err
}

// GetTaskNum is a free data retrieval call binding the contract method 0xac04277e.
//
// Solidity: function getTaskNum() constant returns(uint256)
func (_Coop *CoopSession) GetTaskNum() (*big.Int, error) {
	return _Coop.Contract.GetTaskNum(&_Coop.CallOpts)
}

// GetTaskNum is a free data retrieval call binding the contract method 0xac04277e.
//
// Solidity: function getTaskNum() constant returns(uint256)
func (_Coop *CoopCallerSession) GetTaskNum() (*big.Int, error) {
	return _Coop.Contract.GetTaskNum(&_Coop.CallOpts)
}

// Idxtoids is a free data retrieval call binding the contract method 0xf63afc23.
//
// Solidity: function idxtoids(uint256 ) constant returns(bytes32)
func (_Coop *CoopCaller) Idxtoids(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Coop.contract.Call(opts, out, "idxtoids", arg0)
	return *ret0, err
}

// Idxtoids is a free data retrieval call binding the contract method 0xf63afc23.
//
// Solidity: function idxtoids(uint256 ) constant returns(bytes32)
func (_Coop *CoopSession) Idxtoids(arg0 *big.Int) ([32]byte, error) {
	return _Coop.Contract.Idxtoids(&_Coop.CallOpts, arg0)
}

// Idxtoids is a free data retrieval call binding the contract method 0xf63afc23.
//
// Solidity: function idxtoids(uint256 ) constant returns(bytes32)
func (_Coop *CoopCallerSession) Idxtoids(arg0 *big.Int) ([32]byte, error) {
	return _Coop.Contract.Idxtoids(&_Coop.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Coop *CoopCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Coop.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Coop *CoopSession) Owner() (common.Address, error) {
	return _Coop.Contract.Owner(&_Coop.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Coop *CoopCallerSession) Owner() (common.Address, error) {
	return _Coop.Contract.Owner(&_Coop.CallOpts)
}

// Projects is a free data retrieval call binding the contract method 0xb96ea12d.
//
// Solidity: function projects(bytes32 ) constant returns(bytes32 id, bytes32 pid, address sponsor, string title, string cata, string desc, string attachment, uint256 pratio, uint256 status, uint256 timestamp)
func (_Coop *CoopCaller) Projects(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Id         [32]byte
	Pid        [32]byte
	Sponsor    common.Address
	Title      string
	Cata       string
	Desc       string
	Attachment string
	Pratio     *big.Int
	Status     *big.Int
	Timestamp  *big.Int
}, error) {
	ret := new(struct {
		Id         [32]byte
		Pid        [32]byte
		Sponsor    common.Address
		Title      string
		Cata       string
		Desc       string
		Attachment string
		Pratio     *big.Int
		Status     *big.Int
		Timestamp  *big.Int
	})
	out := ret
	err := _Coop.contract.Call(opts, out, "projects", arg0)
	return *ret, err
}

// Projects is a free data retrieval call binding the contract method 0xb96ea12d.
//
// Solidity: function projects(bytes32 ) constant returns(bytes32 id, bytes32 pid, address sponsor, string title, string cata, string desc, string attachment, uint256 pratio, uint256 status, uint256 timestamp)
func (_Coop *CoopSession) Projects(arg0 [32]byte) (struct {
	Id         [32]byte
	Pid        [32]byte
	Sponsor    common.Address
	Title      string
	Cata       string
	Desc       string
	Attachment string
	Pratio     *big.Int
	Status     *big.Int
	Timestamp  *big.Int
}, error) {
	return _Coop.Contract.Projects(&_Coop.CallOpts, arg0)
}

// Projects is a free data retrieval call binding the contract method 0xb96ea12d.
//
// Solidity: function projects(bytes32 ) constant returns(bytes32 id, bytes32 pid, address sponsor, string title, string cata, string desc, string attachment, uint256 pratio, uint256 status, uint256 timestamp)
func (_Coop *CoopCallerSession) Projects(arg0 [32]byte) (struct {
	Id         [32]byte
	Pid        [32]byte
	Sponsor    common.Address
	Title      string
	Cata       string
	Desc       string
	Attachment string
	Pratio     *big.Int
	Status     *big.Int
	Timestamp  *big.Int
}, error) {
	return _Coop.Contract.Projects(&_Coop.CallOpts, arg0)
}

// Tasks is a free data retrieval call binding the contract method 0x7149d2e4.
//
// Solidity: function tasks(address , uint256 ) constant returns(bytes32)
func (_Coop *CoopCaller) Tasks(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Coop.contract.Call(opts, out, "tasks", arg0, arg1)
	return *ret0, err
}

// Tasks is a free data retrieval call binding the contract method 0x7149d2e4.
//
// Solidity: function tasks(address , uint256 ) constant returns(bytes32)
func (_Coop *CoopSession) Tasks(arg0 common.Address, arg1 *big.Int) ([32]byte, error) {
	return _Coop.Contract.Tasks(&_Coop.CallOpts, arg0, arg1)
}

// Tasks is a free data retrieval call binding the contract method 0x7149d2e4.
//
// Solidity: function tasks(address , uint256 ) constant returns(bytes32)
func (_Coop *CoopCallerSession) Tasks(arg0 common.Address, arg1 *big.Int) ([32]byte, error) {
	return _Coop.Contract.Tasks(&_Coop.CallOpts, arg0, arg1)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_Coop *CoopCaller) Version(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Coop.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_Coop *CoopSession) Version() (string, error) {
	return _Coop.Contract.Version(&_Coop.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_Coop *CoopCallerSession) Version() (string, error) {
	return _Coop.Contract.Version(&_Coop.CallOpts)
}

// Claim is a paid mutator transaction binding the contract method 0xbd66528a.
//
// Solidity: function claim(bytes32 id) returns(bool)
func (_Coop *CoopTransactor) Claim(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "claim", id)
}

// Claim is a paid mutator transaction binding the contract method 0xbd66528a.
//
// Solidity: function claim(bytes32 id) returns(bool)
func (_Coop *CoopSession) Claim(id [32]byte) (*types.Transaction, error) {
	return _Coop.Contract.Claim(&_Coop.TransactOpts, id)
}

// Claim is a paid mutator transaction binding the contract method 0xbd66528a.
//
// Solidity: function claim(bytes32 id) returns(bool)
func (_Coop *CoopTransactorSession) Claim(id [32]byte) (*types.Transaction, error) {
	return _Coop.Contract.Claim(&_Coop.TransactOpts, id)
}

// ClaimDeliver is a paid mutator transaction binding the contract method 0x31fa18b1.
//
// Solidity: function claimDeliver(bytes32 id) returns(bool)
func (_Coop *CoopTransactor) ClaimDeliver(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "claimDeliver", id)
}

// ClaimDeliver is a paid mutator transaction binding the contract method 0x31fa18b1.
//
// Solidity: function claimDeliver(bytes32 id) returns(bool)
func (_Coop *CoopSession) ClaimDeliver(id [32]byte) (*types.Transaction, error) {
	return _Coop.Contract.ClaimDeliver(&_Coop.TransactOpts, id)
}

// ClaimDeliver is a paid mutator transaction binding the contract method 0x31fa18b1.
//
// Solidity: function claimDeliver(bytes32 id) returns(bool)
func (_Coop *CoopTransactorSession) ClaimDeliver(id [32]byte) (*types.Transaction, error) {
	return _Coop.Contract.ClaimDeliver(&_Coop.TransactOpts, id)
}

// ClaimSign is a paid mutator transaction binding the contract method 0x069826af.
//
// Solidity: function claimSign(bytes32 id, address claimer) returns(bool)
func (_Coop *CoopTransactor) ClaimSign(opts *bind.TransactOpts, id [32]byte, claimer common.Address) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "claimSign", id, claimer)
}

// ClaimSign is a paid mutator transaction binding the contract method 0x069826af.
//
// Solidity: function claimSign(bytes32 id, address claimer) returns(bool)
func (_Coop *CoopSession) ClaimSign(id [32]byte, claimer common.Address) (*types.Transaction, error) {
	return _Coop.Contract.ClaimSign(&_Coop.TransactOpts, id, claimer)
}

// ClaimSign is a paid mutator transaction binding the contract method 0x069826af.
//
// Solidity: function claimSign(bytes32 id, address claimer) returns(bool)
func (_Coop *CoopTransactorSession) ClaimSign(id [32]byte, claimer common.Address) (*types.Transaction, error) {
	return _Coop.Contract.ClaimSign(&_Coop.TransactOpts, id, claimer)
}

// DeliverySign is a paid mutator transaction binding the contract method 0x8597a4e2.
//
// Solidity: function deliverySign(bytes32 id, bool ok) returns(bool)
func (_Coop *CoopTransactor) DeliverySign(opts *bind.TransactOpts, id [32]byte, ok bool) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "deliverySign", id, ok)
}

// DeliverySign is a paid mutator transaction binding the contract method 0x8597a4e2.
//
// Solidity: function deliverySign(bytes32 id, bool ok) returns(bool)
func (_Coop *CoopSession) DeliverySign(id [32]byte, ok bool) (*types.Transaction, error) {
	return _Coop.Contract.DeliverySign(&_Coop.TransactOpts, id, ok)
}

// DeliverySign is a paid mutator transaction binding the contract method 0x8597a4e2.
//
// Solidity: function deliverySign(bytes32 id, bool ok) returns(bool)
func (_Coop *CoopTransactorSession) DeliverySign(id [32]byte, ok bool) (*types.Transaction, error) {
	return _Coop.Contract.DeliverySign(&_Coop.TransactOpts, id, ok)
}

// Liquidate is a paid mutator transaction binding the contract method 0xd3c583aa.
//
// Solidity: function liquidate(bytes32 sn, bytes32 id, uint256 pratio) returns(bool)
func (_Coop *CoopTransactor) Liquidate(opts *bind.TransactOpts, sn [32]byte, id [32]byte, pratio *big.Int) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "liquidate", sn, id, pratio)
}

// Liquidate is a paid mutator transaction binding the contract method 0xd3c583aa.
//
// Solidity: function liquidate(bytes32 sn, bytes32 id, uint256 pratio) returns(bool)
func (_Coop *CoopSession) Liquidate(sn [32]byte, id [32]byte, pratio *big.Int) (*types.Transaction, error) {
	return _Coop.Contract.Liquidate(&_Coop.TransactOpts, sn, id, pratio)
}

// Liquidate is a paid mutator transaction binding the contract method 0xd3c583aa.
//
// Solidity: function liquidate(bytes32 sn, bytes32 id, uint256 pratio) returns(bool)
func (_Coop *CoopTransactorSession) Liquidate(sn [32]byte, id [32]byte, pratio *big.Int) (*types.Transaction, error) {
	return _Coop.Contract.Liquidate(&_Coop.TransactOpts, sn, id, pratio)
}

// ProjectCancel is a paid mutator transaction binding the contract method 0xfa098738.
//
// Solidity: function projectCancel(bytes32 id) returns(bool)
func (_Coop *CoopTransactor) ProjectCancel(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "projectCancel", id)
}

// ProjectCancel is a paid mutator transaction binding the contract method 0xfa098738.
//
// Solidity: function projectCancel(bytes32 id) returns(bool)
func (_Coop *CoopSession) ProjectCancel(id [32]byte) (*types.Transaction, error) {
	return _Coop.Contract.ProjectCancel(&_Coop.TransactOpts, id)
}

// ProjectCancel is a paid mutator transaction binding the contract method 0xfa098738.
//
// Solidity: function projectCancel(bytes32 id) returns(bool)
func (_Coop *CoopTransactorSession) ProjectCancel(id [32]byte) (*types.Transaction, error) {
	return _Coop.Contract.ProjectCancel(&_Coop.TransactOpts, id)
}

// ProjectComplete is a paid mutator transaction binding the contract method 0x3bea04df.
//
// Solidity: function projectComplete(bytes32 id) returns(bool)
func (_Coop *CoopTransactor) ProjectComplete(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "projectComplete", id)
}

// ProjectComplete is a paid mutator transaction binding the contract method 0x3bea04df.
//
// Solidity: function projectComplete(bytes32 id) returns(bool)
func (_Coop *CoopSession) ProjectComplete(id [32]byte) (*types.Transaction, error) {
	return _Coop.Contract.ProjectComplete(&_Coop.TransactOpts, id)
}

// ProjectComplete is a paid mutator transaction binding the contract method 0x3bea04df.
//
// Solidity: function projectComplete(bytes32 id) returns(bool)
func (_Coop *CoopTransactorSession) ProjectComplete(id [32]byte) (*types.Transaction, error) {
	return _Coop.Contract.ProjectComplete(&_Coop.TransactOpts, id)
}

// Publish is a paid mutator transaction binding the contract method 0x150f99f2.
//
// Solidity: function publish(bytes32 pid, string title, string cata, string desc, string attachment, uint256 pratio) returns(bool)
func (_Coop *CoopTransactor) Publish(opts *bind.TransactOpts, pid [32]byte, title string, cata string, desc string, attachment string, pratio *big.Int) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "publish", pid, title, cata, desc, attachment, pratio)
}

// Publish is a paid mutator transaction binding the contract method 0x150f99f2.
//
// Solidity: function publish(bytes32 pid, string title, string cata, string desc, string attachment, uint256 pratio) returns(bool)
func (_Coop *CoopSession) Publish(pid [32]byte, title string, cata string, desc string, attachment string, pratio *big.Int) (*types.Transaction, error) {
	return _Coop.Contract.Publish(&_Coop.TransactOpts, pid, title, cata, desc, attachment, pratio)
}

// Publish is a paid mutator transaction binding the contract method 0x150f99f2.
//
// Solidity: function publish(bytes32 pid, string title, string cata, string desc, string attachment, uint256 pratio) returns(bool)
func (_Coop *CoopTransactorSession) Publish(pid [32]byte, title string, cata string, desc string, attachment string, pratio *big.Int) (*types.Transaction, error) {
	return _Coop.Contract.Publish(&_Coop.TransactOpts, pid, title, cata, desc, attachment, pratio)
}

// Purchase is a paid mutator transaction binding the contract method 0xcc445611.
//
// Solidity: function purchase(bytes32 id) returns(bool)
func (_Coop *CoopTransactor) Purchase(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "purchase", id)
}

// Purchase is a paid mutator transaction binding the contract method 0xcc445611.
//
// Solidity: function purchase(bytes32 id) returns(bool)
func (_Coop *CoopSession) Purchase(id [32]byte) (*types.Transaction, error) {
	return _Coop.Contract.Purchase(&_Coop.TransactOpts, id)
}

// Purchase is a paid mutator transaction binding the contract method 0xcc445611.
//
// Solidity: function purchase(bytes32 id) returns(bool)
func (_Coop *CoopTransactorSession) Purchase(id [32]byte) (*types.Transaction, error) {
	return _Coop.Contract.Purchase(&_Coop.TransactOpts, id)
}

// SetPrice is a paid mutator transaction binding the contract method 0x10d8d74d.
//
// Solidity: function setPrice(bytes32 id, uint256 price) returns(bool)
func (_Coop *CoopTransactor) SetPrice(opts *bind.TransactOpts, id [32]byte, price *big.Int) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "setPrice", id, price)
}

// SetPrice is a paid mutator transaction binding the contract method 0x10d8d74d.
//
// Solidity: function setPrice(bytes32 id, uint256 price) returns(bool)
func (_Coop *CoopSession) SetPrice(id [32]byte, price *big.Int) (*types.Transaction, error) {
	return _Coop.Contract.SetPrice(&_Coop.TransactOpts, id, price)
}

// SetPrice is a paid mutator transaction binding the contract method 0x10d8d74d.
//
// Solidity: function setPrice(bytes32 id, uint256 price) returns(bool)
func (_Coop *CoopTransactorSession) SetPrice(id [32]byte, price *big.Int) (*types.Transaction, error) {
	return _Coop.Contract.SetPrice(&_Coop.TransactOpts, id, price)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address receiver, uint256 amount) returns(bool)
func (_Coop *CoopTransactor) Transfer(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Coop.contract.Transact(opts, "transfer", receiver, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address receiver, uint256 amount) returns(bool)
func (_Coop *CoopSession) Transfer(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Coop.Contract.Transfer(&_Coop.TransactOpts, receiver, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address receiver, uint256 amount) returns(bool)
func (_Coop *CoopTransactorSession) Transfer(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Coop.Contract.Transfer(&_Coop.TransactOpts, receiver, amount)
}

// CoopReceiptIterator is returned from FilterReceipt and is used to iterate over the raw logs and unpacked data for Receipt events raised by the Coop contract.
type CoopReceiptIterator struct {
	Event *CoopReceipt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoopReceiptIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoopReceipt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoopReceipt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoopReceiptIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoopReceiptIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoopReceipt represents a Receipt event raised by the Coop contract.
type CoopReceipt struct {
	Sn        [32]byte
	From      common.Address
	Itemid    [32]byte
	To        common.Address
	Action    string
	Amount    *big.Int
	Timestamp *big.Int
	Details   string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterReceipt is a free log retrieval operation binding the contract event 0x51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c.
//
// Solidity: event Receipt(bytes32 indexed sn, address indexed from, bytes32 indexed itemid, address to, string action, uint256 amount, uint256 timestamp, string details)
func (_Coop *CoopFilterer) FilterReceipt(opts *bind.FilterOpts, sn [][32]byte, from []common.Address, itemid [][32]byte) (*CoopReceiptIterator, error) {

	var snRule []interface{}
	for _, snItem := range sn {
		snRule = append(snRule, snItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var itemidRule []interface{}
	for _, itemidItem := range itemid {
		itemidRule = append(itemidRule, itemidItem)
	}

	logs, sub, err := _Coop.contract.FilterLogs(opts, "Receipt", snRule, fromRule, itemidRule)
	if err != nil {
		return nil, err
	}
	return &CoopReceiptIterator{contract: _Coop.contract, event: "Receipt", logs: logs, sub: sub}, nil
}

// WatchReceipt is a free log subscription operation binding the contract event 0x51ab6b048a1ee90abb5e9420ac4366efd332cdccbcf33b891813fab5d3dab96c.
//
// Solidity: event Receipt(bytes32 indexed sn, address indexed from, bytes32 indexed itemid, address to, string action, uint256 amount, uint256 timestamp, string details)
func (_Coop *CoopFilterer) WatchReceipt(opts *bind.WatchOpts, sink chan<- *CoopReceipt, sn [][32]byte, from []common.Address, itemid [][32]byte) (event.Subscription, error) {

	var snRule []interface{}
	for _, snItem := range sn {
		snRule = append(snRule, snItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var itemidRule []interface{}
	for _, itemidItem := range itemid {
		itemidRule = append(itemidRule, itemidItem)
	}

	logs, sub, err := _Coop.contract.WatchLogs(opts, "Receipt", snRule, fromRule, itemidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoopReceipt)
				if err := _Coop.contract.UnpackLog(event, "Receipt", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
